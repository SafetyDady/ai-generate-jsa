// backend/routes/generateJSA.js
import express from "express";
import OpenAI from "openai";

const router = express.Router();
const USE_MOCK = false;

// ‚úÖ ‡πÉ‡∏ä‡πâ OpenAI ‡∏£‡∏∏‡πà‡∏ô gpt-3.5-turbo
const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY,
});

// üß† ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á Prompt
const createPrompt = (step) => {
  return `
‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏∑‡∏≠‡∏ú‡∏π‡πâ‡πÄ‡∏ä‡∏µ‡πà‡∏¢‡∏ß‡∏ä‡∏≤‡∏ç‡∏î‡πâ‡∏≤‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô ‡∏à‡∏á‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏á‡∏≤‡∏ô‡∏ô‡∏µ‡πâ‡πÅ‡∏•‡∏∞‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö JSON ‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡πÉ‡∏î ‡πÜ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°

Main Step: ${step.mainStep || "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏"}
Sub Step: ${step.subStep || "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏"}

‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö JSON ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£:
{
  "hazard": "...",
  "control": "...",
  "ppe": "..." // ‡∏£‡∏∞‡∏ö‡∏∏ PPE ‡πÄ‡∏û‡∏µ‡∏¢‡∏á 1 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
}
`;
};

// ‚úÖ Route: POST /api/generate
router.post("/", async (req, res) => {
  const { steps } = req.body;

  if (!steps || !Array.isArray(steps)) {
    return res.status(400).json({ success: false, message: "Missing steps[]" });
  }

  const results = [];

  for (const step of steps) {
    const prompt = createPrompt(step);

    if (USE_MOCK) {
      results.push({
        mainStep: step.mainStep,
        hazards: [
          {
            hazard: "‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏≠‡∏±‡∏ô‡∏ï‡∏£‡∏≤‡∏¢",
            control: "‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ß‡∏¥‡∏ò‡∏µ‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°",
            ppe: "‡∏´‡∏°‡∏ß‡∏Å‡∏ô‡∏¥‡∏£‡∏†‡∏±‡∏¢",
          },
        ],
      });
    } else {
      try {
        const chat = await openai.chat.completions.create({
          model: "gpt-3.5-turbo",
          messages: [
            { role: "system", content: "‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏∑‡∏≠‡∏ú‡∏π‡πâ‡∏ä‡πà‡∏ß‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢‡πÉ‡∏ô‡πÇ‡∏£‡∏á‡∏á‡∏≤‡∏ô" },
            { role: "user", content: prompt },
          ],
          temperature: 0.3,
        });

        const aiText = chat.choices[0].message.content;

        const parsed = extractJSON(aiText);

        results.push({
          mainStep: step.mainStep,
          hazards: [parsed],
        });
      } catch (err) {
        console.error("‚ùå OpenAI error:", err.message);
        results.push({
          mainStep: step.mainStep,
          hazards: [{ hazard: "Error", control: "Error", ppe: "Error" }],
        });
      }
    }
  }

  res.json({ success: true, data: results });
});

// üì¶ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏î‡∏∂‡∏á JSON ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
function extractJSON(text) {
  try {
    const start = text.indexOf("{");
    const end = text.lastIndexOf("}") + 1;
    const jsonText = text.slice(start, end);
    return JSON.parse(jsonText);
  } catch (e) {
    return { hazard: "", control: "", ppe: "" };
  }
}

export default router;

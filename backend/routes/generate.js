// backend/routes/generate.js
import express from "express";
import OpenAI from "openai";

const router = express.Router();
const USE_MOCK = false;

// ‚úÖ ‡πÉ‡∏ä‡πâ OpenAI v4
const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY,
});

// üß† Function ‡∏™‡∏£‡πâ‡∏≤‡∏á Prompt ‡∏à‡∏≤‡∏Å Step
const createPrompt = (step) => {
  return `
‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏∑‡∏≠‡∏ú‡∏π‡πâ‡πÄ‡∏ä‡∏µ‡πà‡∏¢‡∏ß‡∏ä‡∏≤‡∏ç‡∏î‡πâ‡∏≤‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢ ‡∏à‡∏á‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£:
1. ‡∏≠‡∏±‡∏ô‡∏ï‡∏£‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡∏≠‡∏≤‡∏à‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡∏∂‡πâ‡∏ô (Hazard)
2. ‡∏ß‡∏¥‡∏ò‡∏µ‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏° (Control)
3. ‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏†‡∏±‡∏¢‡∏™‡πà‡∏ß‡∏ô‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏• (PPE)

Main Step: ${step.mainStep || "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏"}
Sub Step: ${step.subStep || "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏"}
`;
};

// ‚úÖ Route: POST /api/generate
router.post("/", async (req, res) => {
  const { steps } = req.body;

  if (!steps || !Array.isArray(steps)) {
    return res.status(400).json({ success: false, message: "Missing steps[]" });
  }

  const results = [];

  for (const step of steps) {
    const prompt = createPrompt(step);

    if (USE_MOCK) {
      results.push({
        mainStep: step.mainStep,
        hazards: [
          {
            hazard: "‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏≠‡∏±‡∏ô‡∏ï‡∏£‡∏≤‡∏¢",
            control: "‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ß‡∏¥‡∏ò‡∏µ‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°",
            ppe: "‡∏´‡∏°‡∏ß‡∏Å‡∏ô‡∏¥‡∏£‡∏†‡∏±‡∏¢, ‡∏£‡∏≠‡∏á‡πÄ‡∏ó‡πâ‡∏≤‡∏Å‡∏±‡∏ô‡∏•‡∏∑‡πà‡∏ô",
          },
        ],
      });
    } else {
      try {
        const chat = await openai.chat.completions.create({
          model: "gpt-4",
          messages: [
            { role: "system", content: "‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏∑‡∏≠‡∏ú‡∏π‡πâ‡∏ä‡πà‡∏ß‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢‡πÉ‡∏ô‡πÇ‡∏£‡∏á‡∏á‡∏≤‡∏ô" },
            { role: "user", content: prompt },
          ],
          temperature: 0.3,
        });

        const aiText = chat.choices[0].message.content;

        const parsed = {
          hazard: extract(aiText, "Hazard"),
          control: extract(aiText, "Control"),
          ppe: extract(aiText, "PPE"),
        };

        results.push({
          mainStep: step.mainStep,
          hazards: [parsed],
        });
      } catch (err) {
        console.error("‚ùå OpenAI error:", err.message);
        results.push({
          mainStep: step.mainStep,
          hazards: [{ hazard: "Error", control: "Error", ppe: "Error" }],
        });
      }
    }
  }

  res.json({ success: true, data: results });
});

// üîç ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ä‡πà‡∏ß‡∏¢‡πÅ‡∏¢‡∏Å‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° Hazard, Control, PPE
function extract(text, label) {
  const regex = new RegExp(`${label}\\s*[:Ôºö]([^\\n]*)`, "i");
  const match = text.match(regex);
  return match ? match[1].trim() : "";
}

export default router;
